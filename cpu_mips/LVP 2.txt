Decoder inst10(SW[6:0], HEX0[0:6]);
Decoder2 inst20(SW[11:8], HEX3[0:6]);
Divisor inst30(CLOCK_50,LEDG[0]);

wire clock;
wire [3:0]conta;

Divisor inst1(CLOCK_50,clock);
Cont_10 inst2(clock,KEY[1],conta);
Decoder2 inst3(conta,HEX4[0:6]);
endmodule
			 
module Decoder(input [6:0]E,
					output[6:0] S);
	
	assign S=E; 
	
endmodule

module Decoder2(input [3:0]E,
					output reg[0:6] S);
					
		always@(*)begin
	case(E)
		4'b0000:S=7'b0000001;
		4'b0001:S=7'b1001111;
		4'b0010:S=7'b0010010;
		4'b0011:S=7'b0000110;
		4'b0100:S=7'b1001100;
		4'b0101:S=7'b0100100;
		4'b0110:S=7'b0100000;
		4'b0111:S=7'b0001111;
		4'b1000:S=7'b0000000;
		4'b1001:S=7'b0001100;
		4'b1010:S=7'b0001000;
		4'b1011:S=7'b1100000;
		4'b1100:S=7'b0110001;
		4'b1101:S=7'b1000010;
		4'b1110:S=7'b0110000;
		4'b1111:S=7'b0111000;
	endcase
end
endmodule

module Divisor(input Clk_50MHz,
					output reg Clk_1Hz);
		
	parameter max = 25000000;
	reg [27:0]cont;
	
	initial begin 
		Clk_1Hz = 1'b0;
		 cont = 26'b0;
	end
	
	always@(posedge Clk_50MHz) begin
		cont = cont + 1'b1;
		if(max == cont)begin
			Clk_1Hz=~Clk_1Hz;
			cont = 27'b0;
		end
	end
endmodule


module Cont_10 (input clk,reset, 
						output reg [3:0]cont);	
	reg aux[3:0];
	
	initial begin 
		  cont = 4'b1001;
	end
	always@(posedge clk ) begin
		if (reset == 1'b1)begin
			if (cont <= 4'b1001 && cont > 4'b0000) begin
				cont = cont-1'b1;
			end
			else 
				cont = 4'b1001; 
		end
		else begin
			cont = 4'b0000;
		end
	end
						
endmodule






S